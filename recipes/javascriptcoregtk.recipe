# Copyright (c) 2014-2015, Centricular Ltd. All rights reserved.
# Copyright (c) 2015, Ericsson AB. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or other
# materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

import shutil
from cerbero.utils import shell

class Recipe(recipe.Recipe):
    _name = 'webkitgtk'
    name = 'javascriptcoregtk'
    version = '2.4.6'
    url = 'http://www.webkitgtk.org/releases/{0}-{1}.tar.xz'.format(_name, version)
    stype = SourceType.TARBALL
    srcdir = os.path.join('..', _name + '-' + version)
    licenses = [License.LGPLv2Plus, License.BSD]
    configure_options = "--enable-shared --enable-static --disable-debug \
            --disable-x11-target \
            --disable-wayland-target \
            --disable-glibtest \
            --disable-credential-storage \
            --disable-geolocation \
            --disable-video \
            --disable-web-audio"
    deps = ['glib', 'icu']
    platform_deps = {Platform.ANDROID: ['gnustl']}
    # Parallel builds cause system to run out of memory during linking
    allow_parallel_build = False

    files_libs = ['libjavascriptcoregtk-3.0']
    files_devel = ['include/webkitgtk-3.0/JavaScriptCore',
                   'lib/pkgconfig/javascriptcoregtk-3.0.pc']

    def prepare(self):
        self.make_install = 'make install-libjavascriptcoregtk_3_0_laHEADERS'
        self.make += ' jsc'
        self.build_dir = os.path.join(os.path.dirname(self.build_dir),
                                      self._name + '-' + self.version)
        # XXX: When Blink was moved outside of WebKit, support for building on
        # Android was removed. So we hack it all back in now. This will all be
        # a massive pain if someone decides to upgrade WebKit to 2.6.x
        if self.config.target_platform == Platform.ANDROID:
            if self.config.target_arch == Architecture.ARMv7:
                self.arch_name = "armeabi-v7a"
            elif self.config.target_arch == Architecture.ARM:
                self.arch_name = "armeabi"
            elif self.config.target_arch == Architecture.ARM64:
                self.arch_name = "arm64-v8a"
            elif self.config.target_arch == Architecture.X86:
                self.arch_name = "x86"
            elif self.config.target_arch == Architecture.X86_64:
                self.arch_name = "x86_64"
            else:
                raise FatalError("Unsupported Android architecture: " + \
                    self.config.target_arch)
            # GNU STL is needed for full STL support
            # http://www.kandroid.org/ndk/docs/CPLUSPLUS-SUPPORT.html
            gnustl_includes = shell.check_call('$PKG_CONFIG --cflags gnustl',
                                               shell=True, split=False).strip()
            gnustl_libs = shell.check_call('$PKG_CONFIG --libs gnustl',
                                               shell=True, split=False).strip()
            # This is needed for the libpthread.so hack in configure()
            pthread_libs_path = '-L' + os.path.join(self.build_dir, 'Source')
            self.append_env['CXXFLAGS'] = ' -DPTHREAD_KEYS_MAX=1024' + \
                ' ' + gnustl_includes
            self.append_env['LDFLAGS'] = ' ' + gnustl_libs + ' ' + \
                pthread_libs_path
        if self.config.target_platform == Platform.LINUX and self.config.target_arch == Architecture.ARMv7L:
            self.allow_parallel_build = False

    def configure(self):
        # Fix gcc version check. The old check fails with gcc-5.0 to 5.6
    	shell.replace(os.path.join(self.build_dir, 'Source', 'autotools',
                                   'CheckSystemAndBasicDependencies.m4'),
                      {'__GNUC__ >= 4 && __GNUC_MINOR__ >= 7':
                       '((__GNUC__ == 4 && __GNUC_MINOR__ >= 7) || (__GNUC__ >= 5))'})
    	shell.replace(os.path.join(self.build_dir, 'configure'),
                      {'__GNUC__ >= 4 && __GNUC_MINOR__ >= 7':
                       '((__GNUC__ == 4 && __GNUC_MINOR__ >= 7) || (__GNUC__ >= 5))'})
        if self.config.target_platform == Platform.ANDROID:
            # execinfo.h isn't provided by bionic
            shutil.copy(os.path.join(self.config.recipes_dir, self.name,
                                     'execinfo.h'),
                        os.path.join(self.build_dir, 'Source'))
            # Android doesn't have langinfo.h
            shell.replace(os.path.join(self.build_dir, 'Source', 'WTF', 'wtf',
                                       'Platform.h'),
                          {'#define HAVE_LANGINFO_H 1':
                           '#define HAVE_LANGINFO_H 0',})
            # Fix redefinition of std::is_trivially_destructible
            shell.replace(os.path.join(self.build_dir, 'Source', 'WTF', 'wtf',
                                       'StdLibExtras.h'),
                          {'(COMPILER(GCC) && !COMPILER(CLANG) && !GCC_VERSION_AT_LEAST(4, 8, 1))': '0',})
            # XXX: This is a hack. -pthread looks for libpthread.so, but on
            # Android all that is in libc.so
            os.symlink(os.path.join(self.config.toolchain_prefix, 'platforms',
                                    'android-9', 'arch-arm', 'usr', 'lib',
                                    'libc.so'),
                       os.path.join(self.build_dir, 'Source', 'libpthread.so'))
            mathextras_endif = '#endif // #ifndef WTF_MathExtras_h'
            log2_def = '\ninline double log2(double num) { ' + \
                'return log(num) / log(2.0); }\n'
            shell.replace(os.path.join(self.build_dir, 'Source', 'WTF', 'wtf',
                                       'MathExtras.h'),
                          {mathextras_endif: log2_def + mathextras_endif,})
        # We only want to build JavaScriptCore, so fake all these dependencies
        # to make configure happy
        for each in ('CAIRO_CFLAGS', 'CAIRO_LIBS', 'FREETYPE_CFLAGS',
                     'FREETYPE_LIBS', 'GTK_CFLAGS', 'GTK_LIBS', 'GTK2_CFLAGS',
                     'GTK2_LIBS', 'LIBSOUP_CFLAGS', 'LIBSOUP_LIBS',
                     'LIBXML_CFLAGS', 'LIBXML_LIBS',
                     'LIBXSLT_CFLAGS', 'LIBXSLT_LIBS', 'PANGO_CFLAGS',
                     'PANGO_LIBS', 'SQLITE3_CFLAGS', 'SQLITE3_LIBS',
                     'ac_cv_lib_jpeg_jpeg_destroy_decompress',
                     'ac_cv_header_png_h', 'ac_cv_lib_png_png_read_info',
                     'ac_cv_lib_png_png_read_info',
                     'ac_cv_header_webp_decode_h'):
            self.new_env[each] = "yes"
        self.new_env['AR_FLAGS'] = 'cru'
        shutil.rmtree(os.path.join(self.build_dir, 'Source', 'WebCore', 'icu'))
        shell.replace(os.path.join(self.build_dir, 'configure'),
                      # Remove check for jpeglib.h
                      {'#include <jpeglib.h>': '',
                       # Look for png.h in the current dir, to fake the check
                       '#include <png.h>': '#include "png.h"',
                       # Not building video, also disable video-track
                       'ENABLE_VIDEO_TRACK=1': 'ENABLE_VIDEO_TRACK=0'})
        with open(os.path.join(self.build_dir, "png.h"), 'w') as f:
            f.write("typedef void* png_structp; typedef void* png_infop;")
            f.write("typedef void* png_colorp;")
            f.write("typedef void* png_create_read_struct;")
        self.new_env['icu_config'] = os.path.join(self.config.install_dir,
                                                  'bin', 'icu-config')
        super(recipe.Recipe, self).configure()

    def install(self):
        super(recipe.Recipe, self).install()
        libs = os.path.join(self.build_dir, ".libs")
        libs_i = os.path.join(self.config.install_dir, 'lib')
        for l in ('libjavascriptcoregtk-3.0.a',
                  'libjavascriptcoregtk-3.0.so',
                  'libjavascriptcoregtk-3.0.so.0',
                  'libjavascriptcoregtk-3.0.so.0.16.14'):
            # Strip debug and install all libraries
            strip = os.getenv('STRIP') + ' --strip-debug'
            shell.call('[[ -L {1} ]] || {0} {1}; \
                        cp -a {1} {2}'.format(strip, os.path.join(libs, l),
                                              libs_i))
        shutil.copyfile(os.path.join(libs, 'libjavascriptcoregtk-3.0.lai'),
                        os.path.join(libs_i, 'libjavascriptcoregtk-3.0.la'))
        shutil.copy(os.path.join(self.build_dir, 'Source', 'JavaScriptCore',
                                 'javascriptcoregtk-3.0.pc'),
                    os.path.join(self.config.install_dir, 'lib', 'pkgconfig'))
