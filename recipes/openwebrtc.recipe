# Copyright (c) 2014-2015, Centricular Ltd. All rights reserved.
# Copyright (c) 2015, Ericsson AB. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or other
# materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

import shutil
import re
from cerbero.utils import git
from cerbero.utils import shell
from cerbero.utils import messages
from cerbero.utils import parse_file
from custom import generate_gir_h_from_gir

class Recipe(recipe.Recipe):
    name = 'openwebrtc'
    version = '0.3.0'
    owr_version_id = version
    _api_version = '0.3'
    stype = SourceType.GIT
    licenses = [License.BSD_like]
    remotes = {
        'origin': 'https://github.com/Metrological/openwebrtc.git'
    }
    commit = 'origin/calvaris/rpi-compressed'
    patches = ['openwebrtc/0001-Dont-treat-warnings-as-errors.patch']
    autoreconf = True
    autoreconf_sh = 'mkdir -p m4 && gtkdocize && autoreconf -fiv'
    # Dependencies used in the dynamic (shared) build of OWRTC
    _dynamic_deps = ['libnice', 'gstreamer-1.0', 'gst-plugins-base-1.0',
                     'gst-plugins-good-1.0', 'gst-plugins-bad-1.0',
                     'openwebrtc-gst-plugins']
    # Dependencies used only in the static build of OWRTC
    _static_deps = [i + '-static' for i in _dynamic_deps] + \
                   ['openwebrtc-girepository']
    # Dependencies used in all builds
    deps = ['gettext', 'glib', 'libffi', 'gtk-doc-lite'] + \
           _dynamic_deps
    platform_deps = {Platform.DARWIN: ['json-glib', 'libsoup', 'gtk-doc'],
                     Platform.LINUX: ['json-glib', 'libsoup'],
                     Platform.IOS: _static_deps,
                     Platform.ANDROID: _static_deps + ['gnustl']}
    # Parallel make fails randomly due to .gitignore generation by git.mk
    allow_parallel_build = False

    files_bins = ['openwebrtc-daemon']
    files_libs = ['libopenwebrtc']
    files_devel = ['lib/pkgconfig/openwebrtc-' + _api_version + '.pc',
                   'include/owr']

    platform_files_typelibs = {
        Platform.DARWIN: ['Owr-' + _api_version],
        Platform.LINUX: ['Owr-' + _api_version],
        Platform.WINDOWS: ['Owr-' + _api_version],
    }

    def prepare(self):
        if self.config.variants.owr_bridge:
            self.deps += ['seed']
            self.files_libs += ['libopenwebrtc_bridge']
            self.files_devel.insert(self.files_devel.index('include/owr'), 'lib/pkgconfig/openwebrtc-bridge-' + self._api_version + '.pc')
        else:
            self.configure_options += ' --disable-bridge '
        if self.config.target_platform in (Platform.IOS, Platform.ANDROID):
            # Building tests is useless while cross-compiling
            self.configure_options += ' --disable-gtk-doc --enable-static \
                --enable-owr-static --disable-tests '
            if self.config.target_platform == Platform.ANDROID:
                # self.arch_name is used in post_install to generate the jar
                if self.config.target_arch == Architecture.ARMv7:
                    self.arch_name = "armeabi-v7a"
                elif self.config.target_arch == Architecture.ARM:
                    self.arch_name = "armeabi"
                elif self.config.target_arch == Architecture.ARM64:
                    self.arch_name = "arm64-v8a"
                elif self.config.target_arch == Architecture.X86:
                    self.arch_name = "x86"
                elif self.config.target_arch == Architecture.X86_64:
                    self.arch_name = "x86_64"
                else:
                    raise FatalError("Unsupported Android architecture: " + \
                        self.config.target_arch)
                android_sdk = os.path.join(self.config.build_tools_prefix,
                                           'opt', 'android-sdk')
                self.configure_options += ' --enable-owr-java --enable-shared \
                    --with-android-sdk=' + android_sdk + ' \
                    --with-android-ndk=' + self.config.toolchain_prefix + ' '

            else:
                self.configure_options += '--disable-shared '

            # TODO: Move all this to the openwebrtc build system
            # We're using internal gir symbols for the static build, but the
            # build system doesn't add this because it's stupid
            self.new_env['PKG_CONFIG'] = 'pkg-config --static'
            self.append_env['LDFLAGS'] = ' -lgirepository-internals '
            # Since we're linking statically, we need all these plugins at link
            # time. However, the build system is foobar and doesn't add them.
            gst_plugins = ['alaw', 'app', 'audioconvert', 'audioresample',
                'audiotestsrc', 'coreelements', 'dtls', 'inter', 'mulaw',
                'nice', 'opengl', 'openh264', 'opus', 'rtp', 'rtpmanager', 'scream',
                'sctp', 'srtp', 'videocrop', 'videofilter', 'videoparsersbad',
                'videorate', 'videorepair', 'videoscale', 'videotestsrc',
                'volume', 'vpx', 'videoconvert']
            if self.config.target_platform == Platform.IOS:
                gst_plugins += ['ercolorspace']
            if self.config.target_platform == Platform.ANDROID:
                gst_plugins += ['androidvideosrc', 'opensles']
            else:
                gst_plugins += ['applemedia', 'osxaudio']
            # Convert the array of plugin names to a string of library names
            libdir = self.config.prefix + '/lib' + self.config.lib_suffix
            gst_plugins_path = '-L' + libdir + '/gstreamer-1.0/static '
            self.gst_plugins_libs = ' '.join(['-lgst' + l for l in gst_plugins])
            # This env variable will get substituted in the Makefile
            self.append_env['OPENWEBRTC_GST_PLUGINS_LIBS'] = \
                gst_plugins_path + self.gst_plugins_libs + ' ' + \
                shell.check_call('$PKG_CONFIG --libs --cflags openssl',
                                 shell=True, split=False).strip()

            self.files_devel += [
                'lib/jni/openwebrtc.jar',
                'lib/jni/openwebrtc-sources.jar',
                'lib/jni/openwebrtc-javadoc.jar'
            ]
            if self.config.variants.owr_bridge:
                self.files_devel += [
                    'lib/jni/openwebrtc_bridge.jar',
                    'lib/jni/openwebrtc_bridge-sources.jar',
                    'lib/jni/openwebrtc_bridge-javadoc.jar',
                ]
        elif self.config.target_platform in (Platform.DARWIN, Platform.LINUX):
            self.configure_options += ' --enable-gtk-doc --disable-static \
                --disable-owr-static --enable-shared --enable-tests'
            if self.config.target_platform == Platform.LINUX:
                # Use system libraries for libpulse, libv4l2, and gtk-doc
                self.use_system_libs = True
                self.configure_options += ' --enable-gtk-doc'
            elif self.config.target_platform == Platform.DARWIN:
                self.append_env['XML_CATALOG_FILES'] = self.config.prefix + '/share/xml/catalog'
        else:
            # Windows?
            pass

    def configure(self):
        # The OWR version is the git hash of self.commit or the version if we're
        # using releases. This is used for checking if the target build and the
        # host build are using the same version. Assumes that self.commit is
        # same for both architectures. Note that origin/cerbero_build in the
        # arch-specific sources directory corresponds to self.commit from the
        # local_sources directory.
        if self.stype == SourceType.GIT:
            self.owr_version_id = git.get_hash(self.build_dir,
                                               "origin/cerbero_build").strip()

        if self.config.target_platform != self.config.platform and \
           self.config.target_platform in (Platform.IOS, Platform.ANDROID):
            if self.config.platform == Platform.DARWIN:
                # On OS X, we use a custom config and install everything inside
                # a framework and not inside the default OS X prefix, so we need
                # to read that from the config file. See:
                # https://github.com/EricssonResearch/openwebrtc/wiki/Building-OpenWebRTC-with-Cerbero
                config = {}
                parse_file(os.path.join(self.config.environ_dir,
                                        "osx-x86-64.cbc"),
                           config)
                host_prefix = config['prefix']
            elif self.config.platform == Platform.LINUX:
                config = {}
                parse_file(os.path.join(self.config.environ_dir,
                                        "linux.cbc"),
                           config)
                host_prefix = config['prefix']
            else:
                host_prefix = os.path.join(self.config.prefix, '..',
                                           '{0}_{1}'.format(self.config.platform,
                                                            self.config.arch))

            # Error out if there's no host build
            err_nobuild = "You need to build openwebrtc for the host {0} " \
                    "before you can cross-compile it for " \
                    "{1}".format(self.config.platform,
                                 self.config.target_platform)
            gir_file_path = os.path.join(host_prefix, 'share', 'gir-1.0')
            gir_file = 'Owr-' + self._api_version + '.gir'
            if not os.path.isfile(os.path.join(gir_file_path, gir_file)):
                raise Exception(err_nobuild)

            # Error out if the host build doesn't have a version file
            err_rebuild = "No version_id found for the host " \
                    "{0}; try rebuilding it?".format(self.config.platform)
            host_owr_version_id_path = os.path.join(host_prefix, "share", "owr",
                                                    "version_id")
            if not os.path.isfile(host_owr_version_id_path):
                raise Exception(err_rebuild)

            # Error out if the host build is out of date
            err_oldbuild = "Please update your openwebrtc build for the host " \
                    "{0}; it's out of date".format(self.config.platform)
            with open(host_owr_version_id_path) as f:
                host_owr_version_id = f.read().strip()
            if self.owr_version_id != host_owr_version_id:
                raise Exception(err_oldbuild)

            # Generate Owr-<_api_version>.gir.h from the Owr-<_api_version>.gir in the host build,
            # if it exists. If not, error out because that's the only way we
            # have (yes, this is a hack)
            # This is going to be fun if something causes an exception before
            # we reset the cwd
            old_cwd = os.getcwd()
            os.chdir(gir_file_path)
            gir_h_file = os.path.join(self.build_dir, 'Owr-' + self._api_version + '.gir.h')
            # Generate the gir.h
            generate_gir_h_from_gir(gir_file, gir_h_file)
            if self.config.target_platform == Platform.ANDROID:
                with open(gir_file, 'r') as f:
                    content = f.read()
                # replace the shared-library name for the host with the one used for Android
                content = re.sub(r'shared-library="[^"]*"', 'shared-library="libopenwebrtc_jni.so"', content)
                with open(os.path.join(self.build_dir, "bindings", "java", gir_file), 'w+') as f:
                    f.write(content)
            os.chdir(old_cwd)
        super(Recipe, self).configure()

    def post_install(self):
        # Save the OWR version id to the install root
        owr_version_id_dir = os.path.join(self.config.prefix, "share", "owr")
        if not os.path.isdir(owr_version_id_dir):
            os.makedirs(owr_version_id_dir)
        with open(os.path.join(owr_version_id_dir, "version_id"), 'w') as f:
            f.write(self.owr_version_id)

        # On Android, we want a 'fat' library that contains all the dependencies
        # not provided by the system within itself using static libraries.
        # However, libtool gives us no way to generate that, so we use the
        # 'libtool-link' command inside data/ndk-build/tools.mk to generate a
        # linker command that does that for us, re-create the library, and then
        # add it to the JAR file
        if self.config.target_platform == Platform.ANDROID and self.config.variants.owr_bridge:
            import tempfile
            from cerbero.tools.libtool import LibtoolLibrary
            # MASSIVE HACK: .la files contain dependency information for
            # static linking, and hence contain all the (recursive)
            # dependencies. In libopenwebrtc_bridge_jni.so, we want to only
            # include the static libraries related to the bridge and jni, and
            # depend on a "fat" libopenwebrtc_jni.so for everything else. So, we
            # rewrite the .la files to trick Makefile.bundled-shared into
            # creating such a library.
            #
            # MASSIVE SUB-HACK: We want libopenwebrtc_bridge_jni.so to depend
            # on the "fat" libopenwebrtc_jni.so for all libraries except those
            # that are *ONLY* used by libopenwebrtc_bridge_jni.so. This includes
            # all the dependency libraries that are common between the two
            # libraries. So, we rewrite libopenwebrtc_bridge.la to exclude those
            bridge_la_file = open(os.path.join(self.config.libdir,
                                               "libopenwebrtc_bridge.la"))
            bridge_libs = filter(lambda x: x.startswith("dependency_libs="),
                                 bridge_la_file)[0].replace("'", "").split()
            bridge_l_deps = filter(lambda x: x.startswith("-l"), bridge_libs)
            bridge_la_deps = filter(lambda x: x.endswith(".la"), bridge_libs)
            # ~/cerbero/dist/android_armv7/lib/libgio-2.0.la -> gio-2.0
            bridge_la_deps = set(map(lambda x: os.path.basename(x)[3:-3],
                                     bridge_la_deps))

            owrtc_la_file = open(os.path.join(self.config.libdir,
                                              "libopenwebrtc.la"))
            owrtc_libs = filter(lambda x: x.startswith("dependency_libs="),
                                owrtc_la_file)[0].replace("'", "").split()
            owrtc_la_deps = filter(lambda x: x.endswith(".la"), owrtc_libs)
            owrtc_la_deps = set(map(lambda x: os.path.basename(x)[3:-3],
                                    owrtc_la_deps))

            common_la_deps = owrtc_la_deps.intersection(bridge_la_deps)
            common_la_deps.add("openwebrtc")
            # The C++ STL and FFI are linked statically, so are always needed;
            # otherwise, we get undefined reference errors while linking
            common_la_deps.remove("gnustl")
            common_la_deps.remove("ffi")

            # FIXME: For some reason, seed-gtk3 is missing from
            # libopenwebrtc_bridge.la, so we add it manually here.
            # This needs to be fixed in the la file.
            os.rename(os.path.join(self.config.libdir,
                                   "libopenwebrtc_bridge.la"),
                      os.path.join(self.config.libdir,
                                   "libopenwebrtc_bridge.la.orig"))
            bridge_deps = ['seed-gtk3'] + bridge_l_deps + \
                    filter(lambda x: x not in common_la_deps, bridge_la_deps)
            messages.message(str(bridge_deps))
            bridge_la = LibtoolLibrary("openwebrtc_bridge", 0, 0, None,
                                       self.config.libdir,
                                       self.config.target_platform,
                                       deps=bridge_deps)
            bridge_la.save()

            os.rename(os.path.join(self.config.libdir,
                                   "libopenwebrtc_bridge_jni.la"),
                      os.path.join(self.config.libdir,
                                   "libopenwebrtc_bridge_jni.la.orig"))
            bridge_jni_deps = ['openwebrtc_bridge', '-lopenwebrtc_jni', '-landroid']
            bridge_jni_la = LibtoolLibrary("openwebrtc_bridge_jni", 0, 0, None,
                                           self.config.libdir,
                                           self.config.target_platform,
                                           deps=bridge_jni_deps)
            bridge_jni_la.save()

            make_cmd = 'make -f "{0}" INPUT_LIBRARY="{1}" OUTPUT_LIBRARY="{2}" ' \
                       'CERBERO_DATA_PATH="{3}" PREFIX="{4}" ' \
                       'GSTREAMER_STATIC_PLUGINS="{5}" EXCLUDED_LIBS="{6}"'
            makefile = os.path.join(self.config.recipes_dir, self.name,
                                    'Makefile.bundled-shared')
            try:
                for each in ('openwebrtc', 'openwebrtc_bridge'):
                    input_library = each + '_jni'
                    jar_lib = 'lib' + input_library + '.so'
                    output_library = os.path.join(self.config.libdir, jar_lib)
                    if each == 'openwebrtc':
                        extra_libs = self.gst_plugins_libs
                        excluded_libs = ''
                    else:
                        extra_libs = ''
                        excluded_libs = " ".join(common_la_deps)
                    cmd = make_cmd.format(makefile, input_library,
                                          output_library, self.config.data_dir,
                                          self.config.prefix, extra_libs,
                                          excluded_libs)
                    shell.call(cmd)
                    # We need to repackage the jar file with the fixed library
                    jar_file = os.path.join(self.config.libdir, 'jni',
                                            each + '.jar')
                    # The library needs to be inside 'lib/armeabi' etc (depending
                    # on the architecture, so we need to copy it inside that dir,
                    # add it to the jar and then delete the tmpdir
                    tempdir = tempfile.mkdtemp()
                    # Extract the jar file in the tmpdir
                    old_cwd = os.getcwd()
                    os.chdir(tempdir)
                    shell.call("jar -xvf " + jar_file)
                    # Remove all existing native libraries inside the jar
                    shutil.rmtree("lib")
                    jar_lib_path = os.path.join("lib", self.arch_name)
                    os.makedirs(jar_lib_path)
                    # Copy the fixed native library into the correct path
                    shutil.copy(output_library, jar_lib_path)
                    os.chdir(old_cwd)
                    # Re-create the jar file
                    shell.call("jar -cvf {0} -C {1} .".format(jar_file, tempdir))
                    shutil.rmtree(tempdir)
            finally:
                # Revert to the original la files
                os.rename(os.path.join(self.config.libdir,
                                       "libopenwebrtc_bridge.la.orig"),
                          os.path.join(self.config.libdir,
                                       "libopenwebrtc_bridge.la"))
                os.rename(os.path.join(self.config.libdir,
                                       "libopenwebrtc_bridge_jni.la.orig"),
                          os.path.join(self.config.libdir,
                                       "libopenwebrtc_bridge_jni.la"))
